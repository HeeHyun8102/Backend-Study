원문 : https://velog.io/@ygs0574/OS%EA%B3%B5%EC%9C%A0%EC%9E%90%EC%9B%90%EA%B3%BC-%EC%9E%84%EA%B3%84%EC%98%81%EC%97%AD

# 공유자원(Shared Resource)
### 공유 자원(Shared resource)?
시스템 안에서 각 프로세스, 스레드가 함께 접근할 수 있는 모니터, 프린터, 메모리, 파일, 데이터 등의 자원이나 변수 등을 의미한다.

- <span style="color:indianred">경쟁 상태(race condition)</span>
이 공유 자원을 두 개 이상의 프로세스가 동시에 읽거나 쓰는 상황을 경쟁 상태(race condition)라고 한다.
- <span style="color:indianred">동시성 문제</span>
경쟁 상태가 발생하면 공유 자원의 접근한 순서에 따라 결과 값이 달라진다.
-> 이때 공유 데이터의 일관성을 유지하는 것을 동기화(synchronization)이라 한다.

# 임계영역(critical section)
### 임계 영역(Crtical section)?
둘 이상의 프로세스, 스레드가 공유 자원에 접근할 때 순서등의 이유로 결과가 달라지는 코드 영역을 말한다.

**임계영역 해결 방법**
임계 구역을 해결하는 가장 간단한 방법은 잠금(lock)을 이용하는 것이다.
임계 구역에 들어갈 때 잠금을 걸고, 나올 때 잠금 해제와 동시에 동기화 신호를 보낸다.
위와 같은 방법을 위해서는 상호 배제, 한정 대기, 융통성이라는 조건을 만족해야 한다.


### 임계영역 구성 요건
**상호 배제(mutual exclusion)**
하나의 프로세스가 임계구역에 들어가면 다른 프로세스는 들어오지 못한다.
  - <span style="color:indianred">잠금</span> : 하나의 프로세스가 임계구역을 점유하면 다른 프로세스가 접근 못하게 잠근다.
  - <span style="color:indianred">인터럽트 봉쇄</span> : 하나의 프로세스가 임계구역을 점유하면 모든 인터럽트를 중단시킨다.
  인터럽트의 중단은 새로운 프로세스의 생성이나 프로세스의 전이가 일어나지 않기 때문에 이미 점유하고 있는 임계구역을 다른 프로세스가 접근할 수 없게 된다.
  - <span style="color:indianred">엄격한 교대</span> : 두 개의 프로세스가 하나의 임계구역을 사용할 때 교대로 한 번씩만 접근하도록 하는 방법. 연속적인 접근은 허용하지 않는다.
  - <span style="color:indianred">바쁜 대기</span> : 임계구역에 접근하기 위해 대기하는 프로세스는 지속적으로 접근 시도를 하는 바쁜대기가 일어난다. 프로세스 개수가 많아지고, 바쁜대기 현상이 증가하게 되면 운영체제가 부담이 생겨 시스템의 성능이 떨어진다. 이 현상을 제거하기 위해 세마포어가 존재한다.
  - <span style="color:indianred">잠자기와 깨우기</span> : 상호배제 과정에서 바쁜 대기를 제거하기 위한 알고리즘이다.
  Wakeup은 Signal(S, =세마포어), V(S)등으로 사용한다.
  Sleep은 Wait(S), P(S) 등으로 사용한다.
  
**한정 대기(bounded waiting)**
프로세스가 무한대기상태면 안되며 임계 영역에 들어갈 수 있어야한다.

**융통성(=progress, 진행)**
프로세스끼리 진행을 방해해서는 안된다.


- 피터슨 알고리즘
-> 개리 피터슨이 발명, 한계점이 있어 지금은 거의 사용 안한다고한다.

- 데커 알고리즘
-> 하드웨어의 도움이 필요없는 장점이 있지만 구현이 힘들다.

- 스핀락
-> lock()을 가질 수 있을 때 까지 쉬지 않고 반복해서 확인한다.

- 뮤텍스
-> 뮤텍스는 프로세스나 스레드가 lock()을 얻고 다른 프레세스가 접근을 하면 blocking 후 대기 큐로 보낸다. 자원을 다 사용한 프로세스가 unlock()을 얻으면 대기 중인 큐의 프로세스에게 lock()을 부여한다.

- 세마포어
->세마포어는 공유자원의 개수를 표현하는 변수이다
공유하는 자원이 임계구역에 들어올때마다 자원의 개수에 -1을 해준다.
이 자원이 임계구역을 통과하면 다시 1을 반환해준다.
세마포어에 접근하는 함수는 wait()과 signal()이 있다.
현재 임계구역에 여유 공간을 사용하고있으면 wait()을 사용하고 다 쓰고 빠져나오면 다음 프로세스가 자원을 이용할 수 있게 signal()을 보낸다.
세마포어의 단점은 세마포어 자체가 lock()을 소유하는 개념이 아니기 때문에 프로세스가 세마포어를 해제 할 수 있는 경우가 생기낟.
  - 4-1. 이진형 세마포어
0과 1, 즉 오직 하나의 프로세스만으로 판단한다.
  - 4-2 계수형 세마포어
  1보다 더 많은 프로세스 판단한다.


- 모니터
세마포어의 단점을 보완하기 위해 생긴 방식
둘 이상의 스레드나 프로세스가 공유 자원에 안전하게 접근할 수 있도록 공유 자원을 숨기고 해당 접근에 대해 인터페이스만 제공한다.(공유데이터를 캡슐화했다.)
접근하지 못한 스레드는 큐에 들어간 후 대기 상태로 전환된다.

