# 배열(Array) vs 리스트(List)
가장 기본적이고 순차적인(Sequential) 자료구조이다.


### 배열의 구조
C
```
int A[4] = {2, 4, 0, 5}

A배열은 각 인덱스마다 각각의 주소로 저장되어있다.
A[2] = A[2] + 1 # 읽기, 쓰기, 대입, 산술 연산이 실행된다. -> O(1)
위와 같은 코드의 시간이 1로 가정되는 것은 A[2]의 주소를 찾아서 읽어오기 때문이다.
A[2]의 주소 = A[0] 주소 값 + (2 * 4)bytes
즉, 자료구조 존재의 의의는 상수시간내에 읽고 쓸 수 있는 것이다.
```
-> index를 통해 상수시간내에 읽고 쓰기가 가능한 자료구조를 배열이라 한다.

### 리스트의 구조
Python
```
A = [2, 4, 0, 5]
A의 요소들은 각각의 객체로써 저장이 되어 각각의 주소 값으로 가리킨다.
A[2] = A[1] + 1
A[2]의 0은 삭제되거나 대체되는 것이 아닌 어딘가에 그대로 저장되어 있고 A[1] + 1의 값인 1은 A[2]는 2라는 객체를 가리킨다.

A.append(6) # 맨 뒤에 6을 삽입한다. A[4] = 6
이때 6이라는 객체가 A[4]는 6을 가리킨다.

A.pop() # 맨 뒤의 값을 지우고 리턴한다.
6이 리턴되고 A[4]에는 아무것도 저장되어 있지 않다.

A.pop(1) #A[1]을 제거하고 리턴한다.
A = [2, 0, 5] 의 형태가 된다.

A.insert(1,10) # A[1]에 10을 삽입한다.
A[1]에 객체가 있을 경우 값들을 우측으로 이동 한 후 A[1]에 10이라는 객체를 가리키게 한다.

A.remove(value) # A에서 value를 제거 제거된 값을 기준으로 우측의 값들이 왼쪽으로 이동한다.

A.index(value) , A.count(value) # 왼쪽부터 읽어서 처음으로 존재하는 밸류의 인덱스 값을 리턴해준다.

```

### 리스트의 용량 자동 조절(Dynamic Array)

```
import sys

A = [] #빈리스트
print(sys.getsizeof(A)) #28bytes(가정)
A.appned(10)
print(sys.getsizeof(A)) #44bytes

위처럼 파이썬내에서는 자동으로 용량을 조절해준다.

A.append(x) : #O(n)
	if A.n < A.capacity:
    	A[n] = x
        A.n = n+1
    else : # A.n == A.capacity
        B = A.capacity*2 #리스트를 새로 할당
        for i in range(n) :
        	B[i] = A[i]
        del A
        A = B
        A[n] = x
        A.n = n+1
```



# 순차적 자료구조(Sequentail data Structures) 소개
 1. 배열, 리스트
	- 인덱스를 통해 임의의 원소로 접근
    - 연산자 A[2] = -1 -> O(1), 삽입 (append, insert), 삭제 (pop, remove) 가능
    -> append와 pop은 맨앞과 뒤의 값으로 연산하면 O(1)지만 중간 값에 사용할 경우 O(n)이 된다.
    
    
2. Stack, Queue, Dequeue
	- 제한된 접근(삽입, 삭제)만 허용
   		- stack : LIFO(Last In First Out)
    	- queue : FIFO(First In First Out)
    	- Dequeue : stack + queue

3. 연결 리스트(Linked list)
	- 연속된 공간이 아닌 연속되지 않는 메모리공간에 독립적으로 저장되어있다.
    - 이 독립적인 요소는 다음 요소에 대한 주소 값을 가져 서로를 연결한다.
    - head, tail, next, prev, None(=Null)로 구성된다.
    - 인덱스로 접근 할 수 없다.
    - 중간 값을 알고 싶다면 head부터 next를 하면서 해당 값을 찾아야한다.
    - 배열과 반대되는 장단점을 갖고있다.


    # Stack

**Stack 구현하기**
- 필수 요소
	- 자료구조 값 삽입 (push)
	- 자료구조 값 삭제	(pop)
	- 자료구조 값 탐색
```
# Stack 클래스의 모든 함수들의 시간복잡도는 O(1)
class Stack:
	def __init__(self):
    	self.items = [] #데이터 저장을 위한 리스트 준비

	def push(self, val):
    	self.items.append(val)

	def pop(self):
    	try: 
        	return self.items.pop()
        except IndexError: #pop할 아이템이 없으면?
        	print("Stack is empty")

	def top(self):
    	try:
        	return self.items[-1]
		except IndexError:
        	print("Stack is empty")

	def __len__(self): #len() 호출하면 stack의 item수 반환
    	return len(self.items)
```

- push : 삽입 , 마치 리스트의 append와 같다.
- pop : 삭제, 마치 리시트의 pop과 같다.
	-> 리스트를 스택처럼 쓰지 않는 이유는 리스트는 훨씬 더 강력한 기능들이 많지만 스택의 기능은 그 자체로 간단명료하다. 그러므로 리스트를 스택처럼 사용하다보면 append와 pop이 아닌 다른 함수들을 이용해서 참고하거나 활용 할 확률이 있기 때문에 stack을 활용한다.
    
- top : stack의 맨 위에있는 값을 지운다음 리턴해준다.
- len : stack에 존재하는 값의 개수를 리턴해준다.


# Queue
**Queue 구현하기**
- 필수요소
	- 삽입 enqueue(=push)
    - 삭제 dequeue(!=pop, 첫 번째 값을 삭제)
- Queue는 삭제 될 첫 번째 인덱스와 삽입 될 마지막 인덱스가 필요하다.

```
class queue:
	def __init__(self):
    	self.items = []
        self.front_index = 0
        
    def enqueue(self, val):
    	self.items.append(val)
    
    def dequeue(self):
    	if self.front_index == len(self.items) :
        	print("Q is empty")
            return None
        else :
        	x = self.items[front_index]
            self.front_index += 1
            return x
```

# 연결리스트(Linked List)
**배열과 연결리스트의 차이**
배열은 인덱스를 통한 연속된 메모리 공간에 저장된 값을 꺼내오기 때문에 O(1)의 상수시간내에 계산할 수 있다.
하지만 연결리스트는 값이 연속된 메모리 공간에 저장되어있는 것이 아니라 각각의 메모리 공간에서 존재하기 때문에 현재의 값과 함께 다음 값에 대한 주소가 함께 저장되어있어 그 주소를 참고하여 다음 값을 찾아낸다.
즉, 실제 데이터 값(key)과 다음 값에 대한 주소 값(link)으로 구성된 쌍으로 구성되어 있다.
연결리스트의 모든 값 혹은 특정한 값을 알기 위해서는 헤드 노드부터 링크를 따라가 테일 노드까지 순회해야 하기 때문에 탐색시에는 O(n)의 시간복잡도를 가진다.


**연결리스트 구성 요소**
- key : 실제 필요로하는 데이터 값
- link : 순차적인 다음 값을 찾기 위해 필요로 하는 주소 값(next, prev)
- node : key와 link로 구성된 하나의 데이터
- haed : 연결리스트의 시작되는 첫 노드
- tail : 연결리스트의 마지막이 되는 노드
- None : 마지막 노드(tail)의 다음 값, 첫번째 노드(head)의 이전 값


### 한방향
다음 값에 대한 링크만을 갖고 있는 연결리스트이다.

**구현하기**
```
class Node:
	def __init__(self, key=None):
    	self.key = key
        self.next = None
    
    def __str__(self):
    	return str(self.key)
        
    

class SinglyLinkedList:
	def __init__(self):
    	self.head = None
        self.size = 0
    
    #삽입하기
    def pushFront(self, key): #O(1)
    	new_head_node = Node(key)
        new_head_node.next = self.head
        self.head = new_head_node
        self.size += 1
        
    def pushBack(self,key): #O(n)
   		new_tail_node = Node(key)
        if len(self) == 0:
        	self.head = new_tail_node
        else:
        	tail = self.head
            while tail.next != None:
            	tail = tail.next
            tail.next = new_tail_node
        self.szie += 1
     
     #삭제하기
     def popFront(self): #O(1)
     	if len(self) == 0:
        	return None
        else :
        	x = self.haed
            key = x.key
            self.head = x.next
            self.size -= 1
            del x
            return key
            
      def popBack(self): #O(n)
      	if len(self) == 0:
        	return None
        else:
        	#running technique
            prev, tail = None, self.head
            while tail.next != None:
            	prev = tail
                tail = tail.next
            if len(self) == 1: #값이 1개일때
            	self.head = None
            else:
            	prev.next = tail.next
            key = tail.key
            del tail
            size -= 1
            return key
            
       #탐색
       def search(self,key):
       	#하나의 값 찾기
       	v = self.head
        while v != None:
			if v.key == key:
            	return v
        return None
        
        #generator
        def __iterator__(self):
			v = self.head
            while v != None:
            	yield v
                v = v.next
```


### 양방향(원형 연결리스트)
이전 값과 다음 값에 대한 링크를 갖고 있는 연결리스트이다.
한방향 연결리스트에 비해 메모리양이 2배가량 되지만 단점을 보완하며 데이터를 보다 더 효율적으로 사용가능하다. 

- 원형 연결리스트의 head와 tail을 구분하기 위해 비어있는(None) dummy node가 필요하다.
- dummy node의 prev는 tail이고 next는 head이지만 dummy node를 head node로 규정한다.

#### splice 연산
 - a와 b사이의 값들을 x와 x.next의 뒤에 연결한다.
```
#노드 a,b,x를 받아 사용
def splice(self,a,b,x):
	#조건 1 : a -> ... -> b
    #조건 2 : a와 b사이에 head노드가 없어야 한다.
    ap = a.prev, bn = b.next, xn = x.next
    ap.next = bn
    bn.prev = ap
    x.next = a
    a.prev = x
    b.next = xn
    xn.prev = b
```

**구현하기**
```
class Node:
	def __init__(self, key=None):
    	self.key = key
        self.next = self
        self.prev = self
    
class DoublyLinkedList:
	def __init__(self):
    	self.head = Node()
        self.size = 0
    
    #노드a를 노드x다음으로 이동
    def moveAfter(self,a,x):
    	splice(a,a,x)
    
    #노드a를 x의 전으로 이동
    def moveBefore(self,a,x):
    	splice(a,a,x.prev)
    
    #삽입하기  O(1)
    def insertAfter(self,x,key):
    	moveAfter(Node(key),x)
        
    def insertBefore(self,x,key):
    	moveBefore(Node(key),x)
        
    def pushFornt(self,key):
    	insertAfter(self.head,key)
        
    def pushBack(self,key):
    	insertBefore(self.head,key)
        
    #삭제하기 O(1)
    def remove(self, key):
    	if key == None or key == self.head:
        	pass
        key.prev.next = key.next
        key.next.prev = key.prev
        del key
        
    def popFront(self):
    	if self.head.next != None:
    		remove(self.head.next)
        else:
        	return None
    
    def popBack(self):
    	if self.head.prev != None:
        	remove(self.head.prev)
        else:
        	return None
    
    #탐색하기 O(n)
    def search(self,key):
    	v = self.head
        while v.next != self.head:
        	if v.key == key:
            	return v
            v = v.next
        return None
	
```
